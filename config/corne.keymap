/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// global config settings
#define TAPPING_TERM 190
#define QUICK_TAP 185 
#define COMBO_TIMEOUT 30

// mouse emulation configuration
#define MOUSE_MAX_SPEED 2400 
#define M_UP MOVE_VERT(-MOUSE_MAX_SPEED)
#define M_DOWN MOVE_VERT(MOUSE_MAX_SPEED)
#define M_LEFT MOVE_HOR(-MOUSE_MAX_SPEED)
#define M_RIGHT MOVE_HOR(MOUSE_MAX_SPEED)

// layer aliases
#define L_DEFAULT 0
#define L_NUM_SYM 1
#define L_NAV_MED 2
#define L_NUMPAD 3
#define L_GAMING 4
#define L_CONTROL 5

&mt {
    flavor = "balanced";
    //flavor = "tap-preferred";
    tapping-term-ms = <TAPPING_TERM>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <QUICK_TAP>;
};

&mmv {
    time-to-max-speed-ms = <750>;
};

/ {

        macros{
            m_aa: m_aa {
                label = "MACRO_DOUBLE_A";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp A &kp A>;
            };
            m_cc: m_cc {
                label = "MACRO_DOUBLE_C";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp C &kp C>;
            };
            m_vv: m_vv {
                label = "MACRO_DOUBLE_V";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp V &kp V>;
            };
            m_xx: m_xx {
                label = "MACRO_DOUBLE_X";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&macro_tap &kp X &kp X>;
            };
        };

        behaviors {
                // home row shift mod requires some special settings to feel just right
		hs: homerow_shift {
		    compatible = "zmk,behavior-hold-tap";
		    label = "HOMEROW_MODS";
		    #binding-cells = <2>;
		    tapping-term-ms = <175>;
		    quick_tap_ms = <QUICK_TAP>;
		    flavor = "balanced";
		    bindings = <&kp>, <&kp>;
		};
                // embedded functions for tap-and-hold functionality
                th_macro_a: tap_hold_macro_a {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_A";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_aa>;
                };
                th_macro_c: tap_hold_macro_c {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_C";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_cc>;
                };
                th_macro_v: tap_hold_macro_v {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_V";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_vv>;
                };
                th_macro_x: tap_hold_macro_x {
                    compatible = "zmk,behavior-hold-tap";
                    label = "TAP_THEN_HOLD_MACRO_X";
                    #binding-cells = <2>;
                    tapping-term-ms = <200>;
                    quick-tap-ms = <QUICK_TAP>;
                    flavor = "tap-preferred";
                    bindings = <&kp>, <&m_xx>;
                };
                td0: tap_dance_0 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_TO_NUMPAD_LAYER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp SPACE>, <&to L_NUMPAD>;
                };
                td1: tap_dance_1 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_TO_GAMING_LAYER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp BSPC>, <&to L_GAMING>;
                };
                td2: tap_dance_2 {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_DANCE_RESET_BOOTLOADER";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&reset>, <&bootloader>;
                };
                th_a: tap_hold_a {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_A";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp A>, <&th_macro_a LC(A) 0>;
                };
                th_c: tap_hold_c {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_C";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp C>, <&th_macro_c LC(C) 0>;
                };
                th_v: tap_hold_v {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_V";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp V>, <&th_macro_v LC(V) 0>;
                };
                th_x: tap_hold_x {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_CTRL_X";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp X>, <&th_macro_x LC(X) 0>;
                };
                th_print_win: tap_hold_print_window {
                    compatible = "zmk,behavior-tap-dance";
                    label = "TAP_HOLD_PRINT_WINDOW";
                    #binding-cells = <0>;
                    tapping-term-ms = <TAPPING_TERM>;
                    bindings = <&kp LA(PSCRN)>, <&kp PSCRN>;
                };

        };

        combos {
                compatible = "zmk,combos";
                combo_grave {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <1 2>;
                    bindings = <&kp GRAVE>;
                    layers = <0>;
                };
                combo_tilde {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <2 3>;
                    bindings = <&kp TILDE>;
                    layers = <0>;
                };
                combo_pipe {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <3 4>;
                    bindings = <&kp PIPE>;
                    layers = <0>;
                };
                combo_minus {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <9 10>;
                    bindings = <&kp MINUS>;
                    layers = <0>;
                };
                combo_semicolon {
                    timeout-ms = <COMBO_TIMEOUT>;
                    key-positions = <21 22>;
                    bindings = <&kp SEMI>;
                    layers = <0>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer { // 0 (L_DEFAULT)
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  -   |
// |  TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ENT | GUI | BKS |   | SPC | DEL  | ALT |
                        bindings = <
   &kp ESC    &kp Q        &kp W  &kp E         &kp R         &kp T                     &kp Y                &kp U             &kp I         &kp O    &kp P           &kp MINUS
   &kp TAB    &th_a        &kp S  &mt LGUI D    &hs LSHFT F   &kp G                     &kp H                &hs RSHFT J       &mt RGUI K    &kp L    &kp SQT         &kp SEMI
   &kp LSHFT  &mt LCTRL Z  &th_x  &th_c         &th_v         &kp B                     &kp N                &kp M             &kp COMMA     &kp DOT  &mt RCTRL FSLH  &kp RSHFT
                                  &mt LALT RET  &mt LSHFT ESC  &lt L_NUM_SYM BSPC        &lt L_NAV_MED SPACE  &mt L_NUMPAD TAB  &mt RALT DEL
                        >;
                };

                number_symbol_layer {  // 1
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
// |      |  \  |  :  |  ;  |  {  |  [  |   |  ]  |  }  |  =  |  +  |  -  |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &kp EXCL   &kp AT     &kp HASH  &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS      &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &trans
   &trans  &kp N1     &kp N2     &kp N3    &mt LSHFT N4  &kp N5          &kp N6     &mt RSHFT N7  &kp N8           &kp N9    &kp N0     &trans
   &trans  &kp BSLH   &kp COLON  &kp SEMI  &kp LBRC      &kp LBKT        &kp RBKT   &kp RBRC      &kp EQUAL        &kp PLUS  &kp MINUS  &trans
                                 &trans    &trans        &trans          &td0       &trans        &trans
                        >;
                };

                nav_media_layer {  // 2
// -----------------------------------------------------------------------------------------
// |      |  F1 | F2  | F3  | F4  | F5  |   | F6   |  F7  | F8   | F9  | F10  |      |
// |      | PUP | PRN | BT3 | BT4 | F11 |   | LCLK | LFT  | DOWN | UP  | RGT  |      |
// |      | PDN | SLK |     |     | F12 |   | RCLK | MLFT | MDWN | MUP | MRGT |      |
//                    | GUI |     | SPC |   |      |      |      |
                        bindings = <
   &trans  &kp F1     &kp F2         &kp F3      &kp F4        &kp F5               &kp F6     &kp F7       &kp F8       &kp F9     &kp F10       &trans
   &trans  &kp PG_UP  &th_print_win  &trans      &kp C_VOL_UP  &kp F11              &mkp LCLK  &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT     &trans
   &trans  &kp PG_DN  &kp SLCK       &kp C_MUTE  &kp C_VOL_DN  &kp F12              &mkp RCLK  &mmv M_LEFT  &mmv M_DOWN  &mmv M_UP  &mmv M_RIGHT  &trans
               	                     &trans      &td1          &mo L_CONTROL        &trans     &trans          &trans
                        >;
                };

                numpad_layer {  // 3
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |   *  | NUM7 | NUM8 |  NUM9  |  -  |      |
// |      |     |     |     |     |     |   |   /  | NUM4 | NUM5 |  NUM6  |  +  |      |
// |      |     |     |     |     |     |   | NUM0 | NUM1 | NUM2 |  NUM3  |  .  |      |
//                    |     |     | L0  |   | ENTR | BSPC |      |
                        bindings = <
   &trans  &trans  &trans  &trans  &trans  &trans               &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp BSPC
   &trans  &trans  &trans  &trans  &trans  &trans               &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &trans
   &trans  &trans  &trans  &trans  &trans  &trans               &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp KP_ENTER
                           &trans  &trans  &to L_DEFAULT        &trans           &trans     &trans
                        >;
                };

                gaming_layer {  // 4
// -----------------------------------------------------------------------------------------
// |      | TAB  |  Q  |  W  |  E  |  R  |   |     |     |     |     |     |      |
// |      | SHFT |  A  |  S  |  D  |  F  |   |     |     |     |     |     |      |
// |      | CTRL |  X  |  C  |  V  |  B  |   |     |     |     |     |     |      |
//                     |     |     | SPC |   | L0  |     |     |
                        bindings = <
   &trans  &kp TAB     &kp Q  &kp W   &kp E   &kp R            &trans         &trans  &trans  &trans  &trans  &trans
   &trans  &kp LSHIFT  &kp A  &kp S   &kp D   &kp F            &trans         &trans  &trans  &trans  &trans  &trans
   &trans  &kp LCTRL   &kp X  &kp C   &kp V   &kp B            &trans         &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &kp SPACE        &to L_DEFAULT  &trans  &trans
                        >;
                };

                control_layer {  // 5
// -----------------------------------------------------------------------------------------
// |  TD2 |     |     |     |     |     |   |     |     |     |     |     | TD2  |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |      |
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &td2        &trans        &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans  &trans  &td2
   &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &trans  &trans  &trans  &trans  &trans  &out OUT_USB
   &trans      &trans        &trans        &trans        &trans        &trans              &trans  &trans  &trans  &trans  &trans  &out OUT_BLE
                          	           &trans        &trans        &trans              &trans  &trans  &trans
                        >;
                };

        };
};
